package com.project.code.Model;

import jakarta.persistence.Id;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import org.bson.types.ObjectId;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "reviews")
public class Review {

    // 1. Add 'customerId' field:
    //    - Type: private Long
    //    - This field represents the customer who created the review.
    //    - This field cannot be empty, use the @NotNull annotation to enforce this rule.
    @NotNull(message = "CustomerId cannot be null")
    private Long customerId;

    // 2. Add 'productId' field:
    //    - Type: private Long
    //    - This field represents the product being reviewed.
    //    - This field cannot be empty, use the @NotNull annotation to enforce this rule.
    @NotNull(message = "ProductId cannot be null")
    private Long productId;

    // 3. Add 'storeId' field:
    //    - Type: private Long
    //    - This field represents the store associated with the product.
    //    - This field cannot be empty, use the @NotNull annotation to enforce this rule.
    @NotNull(message = "StoreId cannot be null")
    private Long storeId;

    // 4. Add 'rating' field:
    //    - Type: private Integer
    //    - This field represents the rating given to the product (out of 5).
    //    - This field cannot be empty, use the @NotNull annotation to enforce this rule.
    @NotNull(message = "Rating cannot be null")
    @Min(value = 1, message = "Rating must be at least 1")
    @Max(value = 5, message = "Rating must be at most 5")
    private Integer rating;

    // 5. Add 'comment' field:
    //    - Type: private String
    //    - This field represents an optional comment on the product.
    private String comment;

    // 6. Add validation:
    //    - Apply @NotNull to the customerId, productId, storeId, and rating fields to ensure they are not null.
    //    - Example: @NotNull(message = "Customer cannot be null")

    // 7. Add @Document annotation:
    //    - Use @Document(collection = "reviews") to indicate that this class represents a MongoDB document.

    // 8. Add constructor:
    //    - The constructor should accept values for customerId, productId, storeId, rating, and an optional comment.

    public Review() {
    }

    public Review(Long customerId, Long productId, Long storeId, Integer rating, String comment) {
        this.customerId = customerId;
        this.productId = productId;
        this.storeId = storeId;
        this.rating = rating;
        this.comment = comment;
    }

    public Review(Long customerId, Long productId, Long storeId, Integer rating) {
        this(customerId, productId, storeId, rating, null);
    }

    // 9. Add @Id annotation:
    //    - Use @Id to mark the field 'id' as the primary key for MongoDB.
    //    - The 'id' field is of type String and will be automatically generated by MongoDB.
    @Id
    private String id; // MongoDB uses String for the ID field

    // 10. Add Getters and Setters:
    //    - Add getter and setter methods for all fields (customerId, productId, storeId, rating, comment).


    public @NotNull(message = "CustomerId cannot be null") Long getCustomerId() {
        return customerId;
    }

    public @NotNull(message = "ProductId cannot be null") Long getProductId() {
        return productId;
    }

    public @NotNull(message = "StoreId cannot be null") Long getStoreId() {
        return storeId;
    }

    public @NotNull(message = "Rating cannot be null") @Min(value = 1, message = "Rating must be at least 1") @Max(value = 5, message = "Rating must be at most 5") Integer getRating() {
        return rating;
    }

    public String getComment() {
        return comment;
    }

    public void setCustomerId(@NotNull(message = "CustomerId cannot be null") Long customerId) {
        this.customerId = customerId;
    }

    public void setProductId(@NotNull(message = "ProductId cannot be null") Long productId) {
        this.productId = productId;
    }

    public void setStoreId(@NotNull(message = "StoreId cannot be null") Long storeId) {
        this.storeId = storeId;
    }

    public void setRating(@NotNull(message = "Rating cannot be null") @Min(value = 1, message = "Rating must be at least 1") @Max(value = 5, message = "Rating must be at most 5") Integer rating) {
        this.rating = rating;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }
}
